/* automatically generated by rust-bindgen 0.69.4 */

pub type t_str = *mut ::std::os::raw::c_char;
pub type t_const_str = *const ::std::os::raw::c_char;
pub type t_u8 = ::std::os::raw::c_uchar;
pub type t_i8 = ::std::os::raw::c_char;
pub type t_u16 = ::std::os::raw::c_ushort;
pub type t_i16 = ::std::os::raw::c_short;
pub type t_i32 = ::std::os::raw::c_int;
pub type t_u32 = ::std::os::raw::c_uint;
pub type t_u64 = ::std::os::raw::c_ulonglong;
pub type t_i64 = ::std::os::raw::c_longlong;
pub type t_isize = isize;
pub type t_usize = usize;
pub type t_f32 = f32;
pub type t_f64 = f64;
pub type t_file = ::std::os::raw::c_int;
pub type t_error = bool;

pub type e_token_type = ::std::os::raw::c_uint;
pub type t_token = s_token;
pub type t_vec_token_sort_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut t_token, arg2: *mut t_token) -> bool>;
pub type t_free_token_item = ::std::option::Option<unsafe extern "C" fn(arg1: t_token)>;
pub type t_vec_token = s_vec_token;

pub const ERROR: u32 = 1;
pub const NO_ERROR: u32 = 0;
pub const e_token_type_LPARENS: e_token_type = 0;
pub const e_token_type_RPARENS: e_token_type = 1;
pub const e_token_type_LBRACKET: e_token_type = 2;
pub const e_token_type_RBRACKET: e_token_type = 3;
pub const e_token_type_LCURLY: e_token_type = 4;
pub const e_token_type_RCURLY: e_token_type = 5;
pub const e_token_type_DQ_STRING: e_token_type = 6;
pub const e_token_type_SQ_STRING: e_token_type = 7;
pub const e_token_type_NQ_STRING: e_token_type = 8;
pub const e_token_type_BQ_STRING: e_token_type = 9;
pub const e_token_type_DOLAR_SIGN: e_token_type = 10;
pub const e_token_type_LESS_SIGN: e_token_type = 11;
pub const e_token_type_GREAT_SIGN: e_token_type = 12;
pub const e_token_type_PIPE_SIGN: e_token_type = 13;
pub const e_token_type_AND_SIGN: e_token_type = 14;
pub const e_token_type_SEMI_SIGN: e_token_type = 15;
pub const e_token_type_NEWLINE: e_token_type = 16;
pub use self::e_token_type as t_token_type;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct s_token {
    pub input: t_const_str,
    pub start: t_usize,
    pub end: t_usize,
    pub type_: t_token_type,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct s_vec_token {
    pub free_func: t_free_token_item,
    pub len: t_usize,
    pub capacity: t_usize,
    pub buffer: *mut t_token,
}

#[no_mangle]
pub extern "C" fn tokenize(s: t_const_str, out: *mut t_vec_token) -> t_error {
    ERROR
}

extern "C" {
    pub fn vec_token_new(capacity: t_usize, free_function: t_free_token_item) -> t_vec_token;
    pub fn vec_token_push(vec: *mut t_vec_token, element: t_token) -> t_error;
    pub fn vec_token_push_front(vec: *mut t_vec_token, element: t_token) -> t_error;
    pub fn vec_token_pop(vec: *mut t_vec_token, value: *mut t_token) -> t_error;
    pub fn vec_token_pop_front(vec: *mut t_vec_token, value: *mut t_token) -> t_error;
    pub fn vec_token_free(vec: t_vec_token);
    pub fn vec_token_reserve(vec: *mut t_vec_token, wanted_capacity: t_usize) -> t_error;
    pub fn vec_token_reverse(vec: *mut t_vec_token);
    pub fn vec_token_sort(vec: *mut t_vec_token, is_sorted: t_vec_token_sort_fn);
    pub fn vec_token_find(
        vec: *mut t_vec_token,
        fn_: ::std::option::Option<unsafe extern "C" fn(arg1: *const t_token) -> bool>,
        index: *mut t_usize,
    ) -> t_error;
    pub fn vec_token_find_starting(
        vec: *mut t_vec_token,
        fn_: ::std::option::Option<unsafe extern "C" fn(arg1: *const t_token) -> bool>,
        starting_index: t_usize,
        index: *mut t_usize,
    ) -> t_error;
    pub fn vec_token_all(
        vec: *mut t_vec_token,
        fn_: ::std::option::Option<unsafe extern "C" fn(arg1: *const t_token) -> bool>,
        result: *mut bool,
    ) -> t_error;
    pub fn vec_token_any(
        vec: *mut t_vec_token,
        fn_: ::std::option::Option<unsafe extern "C" fn(arg1: *const t_token) -> bool>,
        result: *mut bool,
    ) -> t_error;
    pub fn vec_token_iter(
        vec: *mut t_vec_token,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                index: t_usize,
                value: *mut t_token,
                state: *mut ::std::os::raw::c_void,
            ),
        >,
        state: *mut ::std::os::raw::c_void,
    );
}
